# .-.aliases.misc 
# Used to add any miscellaneous aliases or commands

test "$SILENT" == false && echo -e "*\tMisc\t\t\t\t*"

# Symlink, clear, and history - convenience aliases
alias symlink='ln -s'
alias c='clear;'
alias h='hist'
# Clear history in memory and on file
alias clear_history='history -c && cat /dev/null > ~/.bash_history'

# Directory aliases
# Make directory and create intermediate directories if not existing
alias md='mkdir -p'
# Remove directory
alias rd='rmdir'

alias ..='cd ..'         # Go up one directory
alias ...='cd ../..'     # Go up two directories
alias ....='cd ../../..' # Go up three directories
alias -- -='cd -'        # Go back

# List only subdirectories in the current directory
alias subdirectories='ls -d */'

# Safety - Force -i flags
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

# ls 
# -a Include directory entries whose names begin with a dot (.).
# -h use unit suffixes: Byte, Kilobyte, etc.
alias ls="ls -ah"

# Helpers to list directories & files
alias list_directories='du -sh * | sort -rn'
alias list_hidden_files_recursively='find . -name ".*" -print'
alias remove_hidden_files_recursively='find . -name ".*" -exec rm -rf {} \;'

# Time & date
alias now='date +"%T'
alias now_time=now
alias now_date='date +"%d-%m-%Y"'

# lighttpd Web server 
alias lighty_load='sudo /etc/init.d/lighttpd reload'
alias lighty_test='sudo /usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf -t'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en1"
alias ips="ifconfig -a | grep -o 'inet6\? \(\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)\|[a-fA-F0-9:]\+\)' | sed -e 's/inet6* //'"

# Curl - convenience aliases
if (exists curl); then
    alias url_download='curl -O'
    alias url_headers='curl -I -L'
fi


# rmate - Activate TextMate from a remote ssh session
# https://github.com/textmate/rmate
# In order to use rmate on your remote server you will need to use port forwarding with ssh. 
# The default rmate port is 52698 so make sure the server's firewall supports this
# Example: 
# alias rmate_tunnel='ssh -R 52698:localhost:52698 user@domain -p 22'
if [ ! -f ~/bin/rmate ]; then
    sudo curl -Lo ~/bin/rmate https://raw.githubusercontent.com/aurora/rmate/master/rmate && sudo chmod a+x ~/bin/rmate && echo 'Installed rmate to ~/bin/rmate'
fi


# OS specific aliases below

if ( os_is darwin ); then
    # OSX
    
    # Flush DNS
	# Mountain Lion or Lion
	#alias flush_dns="sudo killall -HUP mDNSResponder"
	
	# OSX v10.6+
	alias flush_dns="sudo dscacheutil -flushcache"
	
	# Remove Where From tag from mp3
    alias remove_where_tag="xattr -d com.apple.metadata:kMDItemWhereFroms ./*.*"
    
    # Grant or remove admin rights
    alias admin_on='sudo dseditgroup -o edit -a $USER -t user admin'
    alias admin_up='sudo dseditgroup -o edit -a $USER -t user admin'
    # Same as on off
    alias admin_off='sudo dseditgroup -o edit -d $USER -t user admin'
    alias admin_down='sudo dseditgroup -o edit -d $USER -t user admin'
    
    # Desktop Programs
    alias safari="open -a safari"
    alias firefox="open -a firefox"
    alias chrome="open -a google\ chrome"
    alias insecure_chrome="open -a Google\ Chrome --args --disable-web-security"
    alias canary="open -a google\ chrome\ canary"
    alias textmate='open -a TextMate'
    alias f='open -a Finder '
    alias fh='open -a Finder .'
        
    # Recursively delete `.DS_Store` files
    alias delete_ds_store="find . -type f -name '*.DS_Store' -ls -delete"

    # Empty the Trash on all mounted volumes and the main HDD
    # Also, clear Appleâ€™s System Logs to improve shell startup speed
    alias empty_trash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

    # Show/hide hidden files in Finder
    alias show_hidden_files="defaults write com.apple.Finder AppleShowAllFiles YES && killall Finder"
    alias hide_hidden_files="defaults write com.apple.Finder AppleShowAllFiles NO && killall Finder"

    # Hide/show all desktop icons (useful when presenting)
    alias hide_desktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
    alias show_desktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
        
    # If sublime is not symlinked - do so if possible
    if (! exists subl); then
        # Find the first Sublime Text*.app file in either /Applications or ~/Applications
        sublimePath=`find /Applications ~/Applications -d -maxdepth 1 -iname "Sublime Text*.app" 2>/dev/null | head -1`
        # If we found a file
        if [ -a "$sublimePath/Contents/SharedSupport/bin/subl" ]; then
            # Add full path to $sublimePath var
            sublimePath="$sublimePath/Contents/SharedSupport/bin/subl"
            # Check if home bin directory exists. If not try /usr/local
            if [ -d "$HOME/bin" ]; then                
                # Make sure there is not already a symbolic link
                if [ ! -L "$HOME/bin/subl" ]; then
                    test "$SILENT" == false && echo -e '*\t\t\t\t\t*\n*  Symlink Sublime to ~/bin/subl \t*'
                    ln -s "$sublimePath" "$HOME/bin/subl"
                fi
            elif [ -d "/usr/local/bin" ]; then
                # Make sure there is not already a symbolic link  
                if [ ! -L "/usr/local/bin/subl" ]; then   
                    test "$SILENT" == false && echo -e '*\t\t\t\t\t*\n*  Symlink Sublime to /usr/local/bin \t*'
                    ln -s "$sublimePath" /usr/local/bin/subl
                fi
            fi
        fi
    fi
        
    # If sublime is added to bin as subl then alias as sublime
    if (exists subl); then
        alias sublime='subl'
    elif (exists sublime); then
        alias subl='sublime'
    fi
    
    # If TextMate is not symlinked - do so if possible
    if (! exists mate); then
        # Find the first mate file in TextMate.app located in /Applications or ~/Applications
        textMatePath=`find /Applications/TextMate.app/Contents/Resources ~/Applications/TextMate.app/Contents/Resources -d -maxdepth 1 -iname "mate" 2>/dev/null | head -1`
        # If we found a file
        if [ -a "$textMatePath" ]; then
            # Check if home bin directory exists. If not try /usr/local
            if [ -d "$HOME/bin" ]; then
                # Make sure there is not already a symbolic link
                if [ ! -L "$HOME/bin/mate" ]; then
                    test "$SILENT" == false && echo -e '*\t\t\t\t\t*\n*  Symlink TextMate to ~/bin/mate \t*'
                    ln -s "$textMatePath" "$HOME/bin/mate"
                fi
            elif [ -d "/usr/local/bin" ]; then                
                # Make sure there is not already a symbolic link
                if [ ! -L "/usr/local/bin/mate" ]; then   
                    test "$SILENT" == false && echo -e '*\t\t\t\t\t*\n*  Symlink TextMate to /usr/local/bin \t*'
                    ln -s "$textMatePath" /usr/local/bin/mate
                fi
            fi
        fi
    fi
elif ( os_is linux ); then
    # Linux   
    alias system_version="lsb_release -a"
    
    # Copy from command line to clipboard
    if (exists xsel); then
        alias pbcopy='xsel --clipboard --input'
        alias pbpaste='xsel --clipboard --output'
    elif (exists xclip); then
        alias pbcopy='xclip -selection clipboard'
        alias pbpaste='xclip -selection clipboard -o'
    fi
fi