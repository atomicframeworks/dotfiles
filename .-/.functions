# .-.functions
# Used to add any functions

test "$SILENT" == false && echo -e '*  .- Functions\t\t\t\t*'

# Run a process and automatically restart it if it errors
# Killing the process with sigterm will not restart
auto_restart_process() {
    
    # Check if the process is already running
    auto_process_count="$(ps ax | grep 'mythbackend' | grep -v grep | wc -l)"
    
    # Run an infinite loop
    while true;
    do
        # If the process is running exit
        if [ $auto_process_count == 0 ]; then
            $1;
        else
            exit 1
        fi
        
        # Check the exit status of command - code 128 + signal number kills the command
        test $? -gt 128 && break;
    done
}

# Make sure file ends with a newline
ensure_new_line() {
    sed -i '' -e '$a\' "$1"
}

# Test if command exists
exists() {
	if command -v $1 &>/dev/null
	then
		return 0
	else
	    return 1
	fi
}

# .-.config - Function to set config variables or open the file
# Arguments:
# Passing no arguments will simply open the .-/.config file
# 1- The config flag such as DOTSILENT
# 2- The value to set for the flag
.-.config() {    
    # 0 arguments - open the .-/.config file
    if [ $# -eq 0 ];
    then        
        $EDITOR "$DOTCWD/.config"
    elif [ $# -eq 1 ];
    then
        # Only one argument - Must have 2 or 0
        echo 'Warning: You must provide a second arugment to set the config variable value.'
    else
        # Uppercase the first argument and append equals (=)
        CONFIGVAR=($(echo $1 | awk '{print toupper($0)}'))
        CONFIGVAR=$CONFIGVAR=
    
        ensure_new_line "$DOTCWD/.config"
    
        if grep -Fqi "$CONFIGVAR" "$DOTCWD/.config"
        then
            # The config flag is found in config file
            # Now remove it
            sed -i "" -e "/$CONFIGVAR/d" "$DOTCWD/.config"
        else
            # The config flag is NOT found in config file
            # Safe to just add it
            echo -e "\nFlag not found in config file. Adding now..."
        fi
        echo -e "\n.-.config setting:  $CONFIGVAR$2\n";
        
    
        echo "$CONFIGVAR$2" >> "$DOTCWD/.config"
        
        # Resource profile to use new settings
        clear && . "$DOTCWD/.profile"
    fi
}


# Case insensitive testing if the os is linux, darwin, etc.
os_is() {
	# Convert test and os to lower
	local this=$( echo $1 | tr '[A-Z]' '[a-z]' )
	local os=$( echo $OS | tr '[A-Z]' '[a-z]' )
	if [ $os == $this ]; then
		return 0
	else
		return 1
	fi
}


# Open with default editor for systems that do not support open
open_up() {
	$EDITOR $1
}
openup() {
	$EDITOR $1
}

# Process helpers - find & stop processes
get_process_by_name() {
    ps aux | pgrep -f $1
}
kill_process_by_name() {
    pkill $1
}
kill_process_by_id() {
    kill --term $1
}


if ( os_is darwin ); then
	# OSX
    
    # List the members of a group
    members_of_group () { dscl . -list /Users | while read user; do printf "$user "; dsmemberutil checkmembership -U "$user" -G "$*"; done | grep "is a member" | cut -d " " -f 1; };
    
    # Opens a new tab in the current Terminal window and optionally executes a command.
    # When invoked via a function named 'new_win', opens a new Terminal *window* instead.
    new_tab() {

        # If this function was invoked directly by a function named 'new_win', we open a new *window* instead
        # of a new tab in the existing window.
        local funcName=$FUNCNAME
        local targetType='tab'
        local targetDesc='new tab in the active Terminal window'
        local makeTab=1
        case "${FUNCNAME[1]}" in
            newwin)
                makeTab=0
                funcName=${FUNCNAME[1]}
                targetType='window'
                targetDesc='new Terminal window'
                ;;
        esac

        # Command-line help.
        if [[ "$1" == '--help' || "$1" == '-h' ]]; then
            cat <<EOF
Synopsis:
    $funcName [-g|-G] [command [param1 ...]]

Description:
    Opens a $targetDesc and optionally executes a command.

    The new $targetType will run a login shell (i.e., load the user's shell profile) and inherit
    the working folder from this shell (the active Terminal tab).
    IMPORTANT: In scripts, \`$funcName\` *statically* inherits the working folder from the
    *invoking Terminal tab* at the time of script *invocation*, even if you change the
    working folder *inside* the script before invoking \`$funcName\`.

    -g (back*g*round) causes Terminal not to activate, but within Terminal, the new tab/window
      will become the active element.
    -G causes Terminal not to activate *and* the active element within Terminal not to change;
      i.e., the previously active window and tab stay active.

    NOTE: With -g or -G specified, for technical reasons, Terminal will still activate *briefly* when
    you create a new tab (creating a new window is not affected).

    When a command is specified, its first token will become the new ${targetType}'s title.
    Quoted parameters are handled properly.

    To specify multiple commands, use 'eval' followed by a single, *double*-quoted string
    in which the commands are separated by ';' Do NOT use backslash-escaped double quotes inside
    this string; rather, use backslash-escaping as needed.
    Use 'exit' as the last command to automatically close the tab when the command
    terminates; precede it with 'read -s -n 1' to wait for a keystroke first.

    Alternatively, pass a script name or path; prefix with 'exec' to automatically
    close the $targetType when the script terminates.

Examples:
    $funcName ls -l "\$Home/Library/Application Support"
    $funcName eval "ls \\\$HOME/Library/Application\ Support; echo Press a key to exit.; read -s -n 1; exit"
    $funcName /path/to/someScript
    $funcName exec /path/to/someScript
EOF
            return 0
        fi

        # Option-parameters loop.
        inBackground=0
        while (( $# )); do
            case "$1" in
                -g)
                    inBackground=1
                    ;;
                -G)
                    inBackground=2
                    ;;
                --) # Explicit end-of-options marker.
                    shift   # Move to next param and proceed with data-parameter analysis below.
                    break
                    ;;
                -*) # An unrecognized switch.
                    echo "$FUNCNAME: PARAMETER ERROR: Unrecognized option: '$1'. To force interpretation as non-option, precede with '--'. Use -h or --h for help." 1>&2 && return 2
                    ;;
                *)  # 1st argument reached; proceed with argument-parameter analysis below.
                    break
                    ;;
            esac
            shift
        done

        # All remaining parameters, if any, make up the command to execute in the new tab/window.

        local CMD_PREFIX='tell application "Terminal" to do script'

            # Command for opening a new Terminal window (with a single, new tab).
        local CMD_NEWWIN=$CMD_PREFIX    # Curiously, simply executing 'do script' with no further arguments opens a new *window*.
            # Commands for opening a new tab in the current Terminal window.
            # Sadly, there is no direct way to open a new tab in an existing window, so we must activate Terminal first, then send a keyboard shortcut.
        local CMD_ACTIVATE='tell application "Terminal" to activate'
        local CMD_NEWTAB='tell application "System Events" to keystroke "t" using {command down}'
            # For use with -g: commands for saving and restoring the previous application
        local CMD_SAVE_ACTIVE_APPNAME='tell application "System Events" to set prevAppName to displayed name of first process whose frontmost is true'
        local CMD_REACTIVATE_PREV_APP='activate application prevAppName'
            # For use with -G: commands for saving and restoring the previous state within Terminal
        local CMD_SAVE_ACTIVE_WIN='tell application "Terminal" to set prevWin to front window'
        local CMD_REACTIVATE_PREV_WIN='set frontmost of prevWin to true'
        local CMD_SAVE_ACTIVE_TAB='tell application "Terminal" to set prevTab to (selected tab of front window)'
        local CMD_REACTIVATE_PREV_TAB='tell application "Terminal" to set selected of prevTab to true'

        if (( $# )); then # Command specified; open a new tab or window, then execute command.
                # Use the command's first token as the tab title.
            local tabTitle=$1
            case "$tabTitle" in
                exec|eval) # Use following token instead, if the 1st one is 'eval' or 'exec'.
                    tabTitle=$(echo "$2" | awk '{ print $1 }') 
                    ;;
                cd) # Use last path component of following token instead, if the 1st one is 'cd'
                    tabTitle=$(basename "$2")
                    ;;
            esac
            local CMD_SETTITLE="tell application \"Terminal\" to set custom title of front window to \"$tabTitle\""
                # The tricky part is to quote the command tokens properly when passing them to AppleScript:
                # Step 1: Quote all parameters (as needed) using printf '%q' - this will perform backslash-escaping.
            local quotedArgs=$(printf '%q ' "$@")
                # Step 2: Escape all backslashes again (by doubling them), because AppleScript expects that.
            local cmd="$CMD_PREFIX \"${quotedArgs//\\/\\\\}\""
                # Open new tab or window, execute command, and assign tab title.
                # '>/dev/null' suppresses AppleScript's output when it creates a new tab.
            if (( makeTab )); then
                if (( inBackground )); then
                    # !! Sadly, because we must create a new tab by sending a keystroke to Terminal, we must briefly activate it, then reactivate the previously active application.
                    if (( inBackground == 2 )); then # Restore the previously active tab after creating the new one.
                        osascript -e "$CMD_SAVE_ACTIVE_APPNAME" -e "$CMD_SAVE_ACTIVE_TAB" -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" -e "$cmd in front window" -e "$CMD_SETTITLE" -e "$CMD_REACTIVATE_PREV_APP" -e "$CMD_REACTIVATE_PREV_TAB" >/dev/null
                    else
                        osascript -e "$CMD_SAVE_ACTIVE_APPNAME" -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" -e "$cmd in front window" -e "$CMD_SETTITLE" -e "$CMD_REACTIVATE_PREV_APP" >/dev/null
                    fi
                else
                    osascript -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" -e "$cmd in front window" -e "$CMD_SETTITLE" >/dev/null
                fi
            else # make *window*
                # Note: $CMD_NEWWIN is not needed, as $cmd implicitly creates a new window.
                if (( inBackground )); then
                    # !! Sadly, because we must create a new tab by sending a keystroke to Terminal, we must briefly activate it, then reactivate the previously active application.
                    if (( inBackground == 2 )); then # Restore the previously active window after creating the new one.
                        osascript -e "$CMD_SAVE_ACTIVE_WIN" -e "$cmd" -e "$CMD_SETTITLE" -e "$CMD_REACTIVATE_PREV_WIN" >/dev/null
                    else
                        osascript -e "$cmd" -e "$CMD_SETTITLE" >/dev/null
                    fi
                else
                        # Note: Even though we do not strictly need to activate Terminal first, we do it, as assigning the custom title to the 'front window' would otherwise sometimes target the wrong window.
                    osascript -e "$CMD_ACTIVATE" -e "$cmd" -e "$CMD_SETTITLE" >/dev/null
                fi
            fi        
        else    # No command specified; simply open a new tab or window.
            if (( makeTab )); then
                if (( inBackground )); then
                    # !! Sadly, because we must create a new tab by sending a keystroke to Terminal, we must briefly activate it, then reactivate the previously active application.
                    if (( inBackground == 2 )); then # Restore the previously active tab after creating the new one.
                        osascript -e "$CMD_SAVE_ACTIVE_APPNAME" -e "$CMD_SAVE_ACTIVE_TAB" -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" -e "$CMD_REACTIVATE_PREV_APP" -e "$CMD_REACTIVATE_PREV_TAB" >/dev/null
                    else
                        osascript -e "$CMD_SAVE_ACTIVE_APPNAME" -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" -e "$CMD_REACTIVATE_PREV_APP" >/dev/null
                    fi
                else
                    osascript -e "$CMD_ACTIVATE" -e "$CMD_NEWTAB" >/dev/null
                fi
            else # make *window*
                if (( inBackground )); then
                    # !! Sadly, because we must create a new tab by sending a keystroke to Terminal, we must briefly activate it, then reactivate the previously active application.
                    if (( inBackground == 2 )); then # Restore the previously active window after creating the new one.
                        osascript -e "$CMD_SAVE_ACTIVE_WIN" -e "$CMD_NEWWIN" -e "$CMD_REACTIVATE_PREV_WIN" >/dev/null
                    else
                        osascript -e "$CMD_NEWWIN" >/dev/null
                    fi
                else
                        # Note: Even though we do not strictly need to activate Terminal first, we do it so as to better visualize what is happening (the new window will appear stacked on top of an existing one).
                    osascript -e "$CMD_ACTIVATE" -e "$CMD_NEWWIN" >/dev/null
                fi
            fi
        fi

    }

    # Opens a new Terminal window and optionally executes a command.
    new_win() {
        new_tab "$@" # Simply pass through to 'newtab', which will examine the call stack to see how it was invoked.
    }
fi